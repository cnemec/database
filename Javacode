import java.sql.*;
import java.util.ArrayList;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        try (
        
                Class.forName("oracle.jdbc.driver.OracleDriver");
                // Step 1: Allocate a database 'Connection' object
                Connection conn = DriverManager.getConnection(
                        ""jdbc:oracle:thin:@fourier.cs.iit.edu:1521:orcl", "slim21", "YCsBUo3...uK3Z2o1817");
                // MySQL: "jdbc:mysql://hostname:port/databaseName", "username", "password"



        ) {
            user(conn);

        } catch(SQLException ex) {
            ex.printStackTrace();
        }
        // Step 5: Close the resources - Done automatically by try-with-resources
    }

    public enum type{
        CUSTOMER,
        CAR,
        DEALER
    }

    public static void user(Connection conn){
        Scanner sc = new Scanner(System.in);
        System.out.println("Please enter your email: ");
        String email = sc.nextLine();
        String id = "";
        String read = "select ID from customers where email = " + email;
        if (find(conn, read)){
            id = select(conn, read, type.CUSTOMER).trim();
        }
        else{
            int count = 1000;
            while(find(conn, "select ID from customers where id = " + new Integer(count).toString())){
                count++;
            }
            id = new Integer(count).toString();
            System.out.println("Please enter your name: ");
            String name = sc.next();
            System.out.println("Please enter your address: ");
            String address = sc.next();
            System.out.println("Please enter your phone number: ");
            String phone = sc.next();
            System.out.println("Please enter your gender: ");
            String gender = sc.next();
            System.out.println("Please enter your annual income: ");
            String income = sc.next();
            System.out.println("Are you an employee(true or false): ");
            String employee = sc.next();
            read = "('" + name + "', '" + address +"', " + phone + ", '" + gender + "', " +
                    income + ", " + id + ", 0, '" + employee + "')";
            insert(conn, read, type.CUSTOMER);
        }
        boolean reviewAccount = true;
        while(reviewAccount){
            String info = select(conn, "select * from customers where email = " + email, type.CUSTOMER);
            String[] infoList = info.split(" ");
            System.out.println("Name: " + infoList[0]);
            System.out.println("Address: " + infoList[1]);
            System.out.println("Phone Number: " + infoList[2]);
            System.out.println("Gender: " + infoList[3]);
            System.out.println("Annual Income: " + infoList[4]);
            System.out.println("ID: " + infoList[5]);
            String []purchaseHis = infoList[6].split("(?<=\\G.................)");
            System.out.println("Purchase History, Vehicle ID Numbers: ");
            for(int i = 0; i < purchaseHis.length; i++){
                System.out.print(purchaseHis[i] + ", ");
            }
            System.out.println("Employee?: " + infoList[7]);
            System.out.println();
            System.out.println("Would you like to change any info? (yes or no)");
            String yesno = sc.next();
            if(yesno.equals("no")){
                reviewAccount = false;
            }
            else{
                System.out.println("What would you like to change? (name, address, phone, gender, " +
                        "income, id, history, employee)");
                String change = sc.next();
                System.out.println("What would tou like to change it with?");
                String changeWith = sc.next();
                update(conn, change, changeWith, type.CUSTOMER,"email", email);
                }
            System.out.println("Would you like to delete your account? (yes or no)");
            yesno = sc.next();
            if(yesno.equals("yes")){
                delete(conn, type.CUSTOMER, "email", email);
            }

            System.out.println("Would you like to see your purchase history? (yes or no)");
            yesno = sc.next();
            if(yesno.equals("yes")){
                for(int i = 0; i < purchaseHis.length; i++){
                    String purchHis = select(conn, "select * from cars where vin = " + purchaseHis[i], type.CAR);
                    String[] purchHisList = purchHis.split(" ");
                    System.out.println("Vin: " + purchHisList[0]);
                    System.out.println("Brand: " + purchHisList[1]);
                    System.out.println("Model: " + purchHisList[2]);
                    System.out.println("Color: " + purchHisList[3]);
                    System.out.println("Engine: " + purchHisList[4]);
                    System.out.println("Body: " + purchHisList[5]);
                    System.out.println();
                }
            }


        }
        String info = select(conn, "select * from customers where email = " + email, type.CUSTOMER);
        String[] infoList = info.split(" ");
        if(infoList[7].equals("yes")){
            System.out.println("What dealer do you work for? ");
            String dealerWork = sc.next();
            //login
            String vins = select(conn, "select vins from dealer where dealer = " + dealerWork, type.DEALER);
            String[] vinsList = vins.split(" ");
            for(int i = 0; i < vinsList.length; i++){
                String carVins = select(conn, "select * from cars where vin = " + vinsList[i], type.CAR);
                String[] carVinsList = carVins.split(" ");
                System.out.println("Vin: " + carVinsList[0]);
                System.out.println("Brand: " + carVinsList[1]);
                System.out.println("Model: " + carVinsList[2]);
                System.out.println("Color: " + carVinsList[3]);
                System.out.println("Engine: " + carVinsList[4]);
                System.out.println("Body: " + carVinsList[5]);
                String carNum = select(conn, "select lotNum from dealer where vin = " + vinsList[i], type.DEALER);
                System.out.println("Lot Number: " + carNum);
                System.out.println();

                System.out.println("Would you like to update car info, or was the car sold, or neither? (update, sold, neither)");
                String yesno = sc.next();
                if(yesno.equals("update")){
                    System.out.println("What would you like to update? (vin, brand, model, color, engine, body)");
                    String update = sc.next();
                    System.out.println("What would you like to update it with?");
                    String updateWith = sc.next();
                    update(conn, update, updateWith, type.CAR, "vin", vinsList[i]);

                }
                else if(yesno.equals("sold")){
                    System.out.println("What is the ID of the person the car was sold to");
                    String sold = sc.next();
                    update(conn, "history", "history + '" + vinsList[i] + "'", type.CUSTOMER,"id", sold);
                    delete(conn, type.DEALER, "vin", vinsList[i]);
                }

            }
            System.out.println("Would you like to add a car to the dealer? (yes or no)");
            String yesno = sc.next();
            if(yesno.equals("yes")){
                //Find open space in lot, only do so if there is open space
                String lotNums = select(conn, "select vin from dealer where dealer = " + dealerWork, type.DEALER);
                String[] lotNumsList = lotNums.split(" ");
                ArrayList<Integer> lotList = new ArrayList<Integer>();
                for(int x = 0; x < lotNumsList.length; x++){
                    String lotNum = select(conn, "select lotNum from dealer where vin = " + lotNumsList[x], type.DEALER);
                    lotList.add(Integer.parseInt(lotNum));
                }
                //Sort list of lot Numbers
                for(int x = 1; x < lotList.size(); x++){
                    for(int y = lotList.size() - 1; y > 0; y--){
                        if(lotList.get(y) < lotList.get(y-1)){
                            int temp = lotList.get(y);
                            lotList.set(y, lotList.get(y - 1));
                            lotList.set(y - 1, temp);
                        }
                    }
                }

                //Find empty lot
                int lot = 0;
                for(int x = 0; x == lotList.size(); x++){
                    int low = 0;
                    int mid = lotList.size() / 2;
                    int high = lotList.size();

                    while(low < high){
                        if(x == lotList.get(mid)){
                            break;
                        }
                        else if(x > lotList.get((mid))){
                            low = mid + 1;
                        }
                        else{
                            high = mid;
                        }
                        mid = (low + high) / 2;
                    }
                    if(x != lotList.get(mid)){
                        lot = x;
                        break;
                    }
                }
                if(lot < 300){
                    System.out.println("Please enter the car vin: ");
                    String carVin = sc.next();
                    System.out.println("Please enter the car brand: ");
                    String carBrand = sc.next();
                    System.out.println("Please enter the car model: ");
                    String carModel = sc.next();
                    System.out.println("Please enter the car color: ");
                    String carColor = sc.next();
                    System.out.println("Please enter the car engine: ");
                    String carEngine = sc.next();
                    System.out.println("Please enter the car body: ");
                    String carBody = sc.next();
                    read = "('" + carVin + "', '" + carBrand +"', '" + carModel + "', '" + carColor + "', '" +
                            carEngine + "', '" + carBody + "')";
                    insert(conn, read, type.CAR);
                    read = "('" + dealerWork + "', '" + carVin + "', '" + lot +"')";
                    insert(conn, read, type.DEALER);
                }
                else {
                    System.out.println("Lot is too full to add another car");
                }

            }

        }
    }

    public static String select(Connection conn, String select, type type) {
        String ret = "";
        try (Statement stmt = conn.createStatement();) {
            ResultSet rset = stmt.executeQuery(select);

            int id = 0;
            String name = "";
            String address = "";
            int phone = 0;
            String gender = "";
            double income = 0;
            String employee = "";
            String history = "";

            String dealerVins = "";
            String carNum = "";

            String carVin = "";
            String brand = "";
            String model = "";
            String color = "";
            String engine = "";
            String body = "";

            while (rset.next()) {   // Move the cursor to the next row, return false if no more row
                switch (type) {
                    case CUSTOMER:
                        String[] parts = select.split(" ");
                        if(search(parts, "ID")){
                            id = rset.getInt("ID");
                        }
                        if(search(parts, "name")){
                            name = rset.getString("name");
                        }
                        if(search(parts, "address")){
                            address = rset.getString("address");
                        }
                        if(search(parts, "phone")){
                            phone = rset.getInt("phone");
                        }
                        if(search(parts, "gender")){
                            gender = rset.getString("gender");
                        }
                        if(search(parts, "income")){
                            income = rset.getDouble("income");
                        }
                        if(search(parts, "history")){
                            history = rset.getString("history");
                        }
                        if(search(parts, "employee")){
                            employee = rset.getString("employee");
                        }
                        //also add history, don't know how

                        String idString = "";
                        String phoneString = "";
                        String incomeString = "";

                        if(id != 0){
                            idString = new Integer(id).toString();
                        }
                        if(phone != 0){
                            phoneString = new Integer(콜).toString();
                        }
                        if(income != 0){
                            incomeString = new Double(income).toString();
                        }

                        ret =  name + " " + address + " " + phoneString + " " + gender + " " +
                                incomeString + "" + history +  "" + idString + "" + employee;
                        break;

                    case CAR:

                        parts = select.split(" ");
                        if(search(parts, "vin")){
                            carVin = rset.getString("vin");
                        }
                        if(search(parts, "brand")){
                            brand = rset.getString("brand");
                        }
                        if(search(parts, "model")){
                            model = rset.getString("model");
                        }
                        if(search(parts, "color")){
                            color = rset.getString("color");
                        }
                        if(search(parts, "engine")){
                            engine = rset.getString("engine");
                        }
                        if(search(parts, "body")){
                            body = rset.getString("body");
                        }
                        ret =  carVin + " " + brand + " " + model + " " + color + " " +
                                engine + "" + body;
                        break;

                    case DEALER:
                        parts = select.split(" ");
                        if(search(parts, "vin")){
                            dealerVins = rset.getString("vin");
                            ret += dealerVins + " ";
                        }
                        else if(search(parts, "lotNum")){
                            carNum = rset.getString("lotNum");
                            ret = carNum;
                        }
                        break;
                }

            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return ret;
    }

    public static boolean find(Connection conn, String find){
        try (Statement stmt = conn.createStatement();){
            ResultSet rset = stmt.executeQuery(find);
            if (rset != null)
                return true;
            else
                return false;
        }catch(SQLException ex){
            ex.printStackTrace();
        }
        return false;
    }

    public static void update(Connection conn, String update, String updateWith, type type, String change, String changeWith) {
            try(Statement stmt = conn.createStatement();) {
                String typeof = "";
                switch (type){
                    case CUSTOMER:
                        typeof = "customers";
                        break;

                    case DEALER:
                        break;

                    case CAR:
                        typeof = "car";
                        break;
                }

                String strUpdate = "update " + typeof + " set " + update + " = " + updateWith + " where " + change + " = " + changeWith;
                stmt.executeUpdate(strUpdate);

            }catch(SQLException ex){
                ex.printStackTrace();
            }
    }

    public static void insert(Connection conn, String read, type type) {
        try (Statement stmt = conn.createStatement();) {
            String typeof = "";
            switch (type){
                case CUSTOMER:
                    typeof = "customers";
                    break;

                case DEALER:
                    typeof = "dealer";
                    break;

                case CAR:
                    typeof = "car";
                    break;

            }
            /*
            // INSERT a partial record
            sqlInsert = "insert into books (id, title, author) "
                    + "values (3004, 'Fishing 101', 'Kumar')";
            System.out.println("The SQL query is: " + sqlInsert);  // Echo for debugging
            countInserted = stmt.executeUpdate(sqlInsert);
            System.out.println(countInserted + " records inserted.\n");
            */
            String sqlInsert = "insert into " + typeof
                    //Table Customers: name, address, phone, gender, income, ID, history, employee
                    //Table Dealer: dealer, vin, lotNum
                    //Table car: vin, brand, model, color, engine, body
                    + " values " + read;
            stmt.executeUpdate(sqlInsert);
        }catch(SQLException ex){
            ex.printStackTrace();
        }
    }

    public static void delete(Connection conn, type type, String del, String delWith){
        try (Statement stmt = conn.createStatement();) {
            String typeof = "";
            switch (type){
                case CUSTOMER:
                    typeof = "customers";
                    break;

                case DEALER:
                    typeof = "dealer";
                    break;

                case CAR:
                    break;

            }

            // DELETE records with id>=3000 and id<4000
            String sqlDelete = "delete from " + typeof + " where " + del + " = " + delWith;
            stmt.executeUpdate(sqlDelete);
        }catch(SQLException ex){
            ex.printStackTrace();
        }
    }

    public static boolean search(String[] list, String key){
        for(int i = 0; i < list.length; i++){
            if (list[i].equals(key))
                    return true;
        }
        return false;
    }
}
